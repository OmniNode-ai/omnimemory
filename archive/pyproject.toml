[tool.poetry]
name = "omnimemory"
version = "0.1.0"
description = "Advanced memory management and retrieval system for AI applications"
authors = ["OmniNode-ai <contact@omninode.ai>"]
readme = "README.md"
packages = [{include = "omnimemory", from = "src"}]

[tool.poetry.dependencies]
python = "^3.12"

# Core MCP integration for Archon connectivity
mcp = "^1.8.0"

# HTTP client for MCP calls and API communication
httpx = "^0.28.0"

# Data validation and serialization
pydantic = "^2.10.0"

# FastAPI web framework for production API
fastapi = "^0.115.0"
uvicorn = {extras = ["standard"], version = "^0.32.0"}

# Memory and storage components
# Database support for memory storage - using Supabase client
supabase = "^2.9.0"
asyncpg = "^0.29.0"
psycopg2-binary = "^2.9.10"

# SQLAlchemy for memory database
sqlalchemy = "^2.0.0"
alembic = "^1.13.0"

# Redis support for caching and ephemeral memory
redis = "^6.4.0"

# Vector database support
# Pinecone for vector memory storage
pinecone-client = "^4.1.0"
# Qdrant for vector memory storage
qdrant-client = "^1.12.0"

# Environment variable management
python-dotenv = "^1.0.1"

# Async support
asyncio-mqtt = "^0.16.0"

# JSON and YAML processing
pyyaml = "^6.0.2"

# ONEX dependencies for canary node preparation - HTTPS format for improved CI/CD compatibility
# Authentication via git config with Personal Access Token
omnibase_spi = {git = "https://github.com/OmniNode-ai/omnibase_spi.git", branch = "main"}
omnibase_core = {git = "https://github.com/OmniNode-ai/omnibase_core.git", branch = "main"}
omnibase_infra = {git = "https://github.com/OmniNode-ai/omnibase_infra.git", branch = "main"}

# Logging and monitoring
structlog = "^24.4.0"

# Testing framework
pytest = "^8.3.4"
pytest-asyncio = "^0.25.0"
pydantic-settings = "^2.10.1"
psutil = "^7.0.0"
aiohttp = "^3.12.15"

[tool.poetry.group.dev.dependencies]
black = "^24.10.0"
isort = "^5.13.2"
mypy = "^1.14.0"
flake8 = "^7.1.1"
pre-commit = "^4.0.1"
pytest-cov = "^6.0.0"
detect-secrets = "^1.5.0"
memory-profiler = "^0.61.0"
docker = "^7.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py312']

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
markers = [
    "integration: marks tests as integration tests (may require external services)",
    "unit: marks tests as unit tests (no external dependencies)",
]