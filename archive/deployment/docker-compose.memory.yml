name: omnimemory

networks:
  omnimemory-network:
    driver: bridge
  omnibase-network:
    external: true
    name: omnibase_infra_omnibase-network

services:

  # Qdrant - Vector database for semantic memory (INTERNAL ONLY - no exposed ports)
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: omnimemory-qdrant
    networks:
      - omnimemory-network
    volumes:
      - qdrant_data:/qdrant/storage
      - qdrant_config:/qdrant/config
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
      QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS: 4
      QDRANT__STORAGE__PERFORMANCE__MAX_OPTIMIZATION_THREADS: 2
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 bash -c '</dev/tcp/localhost/6333' || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # OmniMemory Collection Manager - Setup Qdrant collections
  qdrant-collection-manager:
    image: curlimages/curl:8.5.0
    container_name: omnimemory-qdrant-collections
    networks:
      - omnimemory-network
    depends_on:
      qdrant:
        condition: service_healthy
    entrypoint: ["/bin/sh"]
    command:
      - -c
      - |
        echo 'Waiting for Qdrant to be ready...'
        curl -f http://omnimemory-qdrant:6333/health
        echo 'Creating OmniMemory collections...'

        echo 'Creating intelligence_vectors collection...'
        curl -X POST http://omnimemory-qdrant:6333/collections/intelligence_vectors \
          -H "Content-Type: application/json" \
          -d '{
            "vectors": {
              "size": 1536,
              "distance": "Cosine"
            },
            "optimizers_config": {
              "default_segment_number": 2,
              "max_segment_size": 20000,
              "memmap_threshold": 1000,
              "indexing_threshold": 10000,
              "flush_interval_sec": 30,
              "max_optimization_threads": 2
            }
          }' || echo "Collection already exists"

        echo 'Creating payload indexes...'
        curl -X POST http://omnimemory-qdrant:6333/collections/intelligence_vectors/index \
          -H "Content-Type: application/json" \
          -d '{"field_name": "processing_mode", "field_schema": "keyword"}' || true
        curl -X POST http://omnimemory-qdrant:6333/collections/intelligence_vectors/index \
          -H "Content-Type: application/json" \
          -d '{"field_name": "file_path", "field_schema": "keyword"}' || true
        curl -X POST http://omnimemory-qdrant:6333/collections/intelligence_vectors/index \
          -H "Content-Type: application/json" \
          -d '{"field_name": "timestamp", "field_schema": "datetime"}' || true

        echo 'OmniMemory Qdrant collections created successfully'
        echo 'Collection status monitoring...'

        # Keep container running with collection monitoring
        while true; do
          sleep 300
          echo "Collection status check at $(date):"
          curl -s http://omnimemory-qdrant:6333/collections | grep -o '"intelligence_vectors"' || echo "Collection not found"
        done
    healthcheck:
      test: ["CMD", "curl", "-f", "http://omnimemory-qdrant:6333/collections"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # OmniMemory Qdrant Adapter - Event processor for vector operations
  omnimemory-qdrant-adapter:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      secrets:
        - github_token
    container_name: omnimemory-qdrant-adapter
    networks:
      - omnimemory-network
      - omnibase-network  # Connect to RedPanda event bus
    environment:
      # Qdrant connection
      QDRANT_URL: http://omnimemory-qdrant:6333
      QDRANT_COLLECTION_NAME: intelligence_vectors

      # RedPanda Event Bus Configuration (PRIMARY)
      REDPANDA_BOOTSTRAP_SERVERS: redpanda:9092
      EVENT_BUS_ENABLED: true
      OMNIMEMORY_NODE_ID: omnimemory_qdrant_adapter_001

      # Adapter configuration
      DEPLOYMENT_ENVIRONMENT: development
      QDRANT_ADAPTER_MAX_VECTOR_DIMENSIONS: 1536
      QDRANT_ADAPTER_MAX_BATCH_SIZE: 100
      QDRANT_ADAPTER_SEARCH_LIMIT: 100
      QDRANT_ADAPTER_TIMEOUT_SECONDS: 30

      # Circuit breaker settings
      QDRANT_CIRCUIT_BREAKER_FAILURE_THRESHOLD: 5
      QDRANT_CIRCUIT_BREAKER_TIMEOUT_SECONDS: 60
      QDRANT_CIRCUIT_BREAKER_HALF_OPEN_MAX_CALLS: 3

      # Logging
      LOG_LEVEL: INFO
      PYTHONUNBUFFERED: 1
    depends_on:
      qdrant:
        condition: service_healthy
      qdrant-collection-manager:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "from omnimemory.nodes.node_qdrant_adapter_effect.v1_0_0.node import NodeQdrantAdapterEffect; print('healthy')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    command: ["python", "-m", "omnimemory.nodes.node_qdrant_adapter_effect.v1_0_0.node"]

  # OmniMemory API Node
  # OmniMemory EFFECT Node API - Event-driven architecture only
  omnimemory-api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      secrets:
        - github_token
    container_name: omnimemory-api
    ports:
      - "38000:8000"  # High port to avoid conflicts
    networks:
      - omnimemory-network
      - omnibase-network  # Connect to shared infrastructure
    environment:
      # NO DATABASE - EFFECT nodes use event bus only
      # QDRANT_URL for direct vector operations only
      QDRANT_URL: http://omnimemory-qdrant:6333

      # RedPanda Event Bus Configuration (PRIMARY)
      REDPANDA_BOOTSTRAP_SERVERS: redpanda:9092
      EVENT_BUS_ENABLED: true
      EVENT_BUS_TIMEOUT: 30
      EVENT_BUS_RETRY_ATTEMPTS: 3
      OMNIMEMORY_NODE_ID: omnimemory_effect_node_001

      # External service connections via omnibase-network
      ARCHON_HOST: archon-mcp
      ARCHON_PORT: 8080

      # AI/LLM configuration
      LLM_BASE_URL: http://host.docker.internal:11434

      # Memory configuration
      MEMORY_CONSOLIDATION_INTERVAL: 3600
      MEMORY_DECAY_RATE: 0.1
      MEMORY_MAX_AGE_DAYS: 30
      MEMORY_CACHE_SIZE: 1000
      MEMORY_COMPRESSION_ENABLED: true

      # Performance targets
      PERFORMANCE_TARGET_MS: 100
      THROUGHPUT_TARGET_OPS_HOUR: 1000000

      # Development settings
      DEBUG: false
      LOG_LEVEL: INFO
      PYTHONUNBUFFERED: 1
    volumes:
      - ../src:/app/src:ro
      - ../tests:/app/tests:ro
    secrets:
      - github_token
    depends_on:
      qdrant:
        condition: service_healthy
      qdrant-collection-manager:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    command: ["uvicorn", "omnimemory.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

secrets:
  github_token:
    environment: "GITHUB_TOKEN"

volumes:
  qdrant_data:
  qdrant_config: