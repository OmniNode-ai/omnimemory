diff --git a/src/omnimemory/models/service/model_service_health.py b/src/omnimemory/models/service/model_service_health.py
new file mode 100644
index 0000000..21a66b6
--- /dev/null
+++ b/src/omnimemory/models/service/model_service_health.py
@@ -0,0 +1,133 @@
+"""
+Service health model following ONEX standards.
+"""
+
+from datetime import datetime
+
+from pydantic import BaseModel, Field
+
+from omnibase_core.enums.node import EnumHealthStatus
+
+
+class ModelServiceHealth(BaseModel):
+    """Service health information following ONEX standards."""
+
+    # Service identification
+    service_id: str = Field(
+        description="Unique identifier for the service",
+    )
+    service_name: str = Field(
+        description="Human-readable name for the service",
+    )
+
+    # Health status
+    status: EnumHealthStatus = Field(
+        description="Current status of the service",
+    )
+    is_healthy: bool = Field(
+        description="Whether the service is considered healthy",
+    )
+
+    # Uptime information
+    uptime_seconds: int = Field(
+        description="Service uptime in seconds",
+    )
+    last_restart_at: datetime | None = Field(
+        default=None,
+        description="When the service was last restarted",
+    )
+
+    # Performance metrics
+    response_time_ms: float = Field(
+        description="Average response time in milliseconds",
+    )
+    requests_per_second: float = Field(
+        description="Current requests per second",
+    )
+    error_rate: float = Field(
+        ge=0.0,
+        le=1.0,
+        description="Error rate as a percentage",
+    )
+
+    # Resource utilization
+    cpu_usage_percent: float = Field(
+        ge=0.0,
+        le=100.0,
+        description="Current CPU usage percentage",
+    )
+    memory_usage_mb: float = Field(
+        description="Current memory usage in megabytes",
+    )
+    memory_usage_percent: float = Field(
+        ge=0.0,
+        le=100.0,
+        description="Memory usage as percentage of allocated",
+    )
+
+    # Connection information
+    active_connections: int = Field(
+        description="Number of active connections",
+    )
+    max_connections: int = Field(
+        description="Maximum allowed connections",
+    )
+    connection_pool_utilization: float = Field(
+        ge=0.0,
+        le=1.0,
+        description="Connection pool utilization percentage",
+    )
+
+    # Dependency health
+    dependencies_healthy: bool = Field(
+        description="Whether all dependencies are healthy",
+    )
+    unhealthy_dependencies: list[str] = Field(
+        default_factory=list,
+        description="List of unhealthy dependencies",
+    )
+
+    # Error information
+    recent_errors: list[str] = Field(
+        default_factory=list,
+        description="List of recent error messages",
+    )
+    critical_errors: int = Field(
+        default=0,
+        description="Number of critical errors in the last hour",
+    )
+
+    # Health check information
+    last_health_check: datetime = Field(
+        default_factory=datetime.utcnow,
+        description="When the health check was performed",
+    )
+    health_check_duration_ms: float = Field(
+        description="Duration of the health check in milliseconds",
+    )
+
+    # Service-specific metrics
+    custom_metrics: dict[str, float] = Field(
+        default_factory=dict,
+        description="Service-specific health metrics",
+    )
+
+    # Alerts and warnings
+    active_alerts: list[str] = Field(
+        default_factory=list,
+        description="List of active alerts",
+    )
+    warnings: list[str] = Field(
+        default_factory=list,
+        description="List of current warnings",
+    )
+
+    # Trend information
+    health_trend: str = Field(
+        default="stable",
+        description="Health trend (improving, stable, degrading)",
+    )
+    performance_trend: str = Field(
+        default="stable",
+        description="Performance trend (improving, stable, degrading)",
+    )
\ No newline at end of file
