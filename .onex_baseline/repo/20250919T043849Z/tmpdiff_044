diff --git a/src/omnimemory/models/foundation/model_metrics_response.py b/src/omnimemory/models/foundation/model_metrics_response.py
new file mode 100644
index 0000000..dddfdfb
--- /dev/null
+++ b/src/omnimemory/models/foundation/model_metrics_response.py
@@ -0,0 +1,118 @@
+"""
+Metrics response model following ONEX standards.
+"""
+
+from datetime import datetime
+from typing import Dict
+
+from pydantic import BaseModel, Field
+
+
+class ModelOperationCounts(BaseModel):
+    """Count of operations by type."""
+
+    storage_operations: int = Field(
+        default=0,
+        description="Number of storage operations"
+    )
+    retrieval_operations: int = Field(
+        default=0,
+        description="Number of retrieval operations"
+    )
+    query_operations: int = Field(
+        default=0,
+        description="Number of query operations"
+    )
+    consolidation_operations: int = Field(
+        default=0,
+        description="Number of consolidation operations"
+    )
+    failed_operations: int = Field(
+        default=0,
+        description="Number of failed operations"
+    )
+
+
+class ModelPerformanceMetrics(BaseModel):
+    """Performance metrics for operations."""
+
+    average_latency_ms: float = Field(
+        description="Average operation latency in milliseconds"
+    )
+    p95_latency_ms: float = Field(
+        description="95th percentile latency in milliseconds"
+    )
+    p99_latency_ms: float = Field(
+        description="99th percentile latency in milliseconds"
+    )
+    throughput_ops_per_second: float = Field(
+        description="Operations per second throughput"
+    )
+    error_rate_percent: float = Field(
+        ge=0.0,
+        le=100.0,
+        description="Error rate as percentage"
+    )
+    success_rate_percent: float = Field(
+        ge=0.0,
+        le=100.0,
+        description="Success rate as percentage"
+    )
+
+
+class ModelResourceMetricsDetailed(BaseModel):
+    """Detailed resource utilization metrics."""
+
+    memory_allocated_mb: float = Field(
+        description="Memory allocated in megabytes"
+    )
+    memory_used_mb: float = Field(
+        description="Memory currently used in megabytes"
+    )
+    cache_hit_rate_percent: float = Field(
+        ge=0.0,
+        le=100.0,
+        description="Cache hit rate percentage"
+    )
+    cache_size_mb: float = Field(
+        description="Cache size in megabytes"
+    )
+    database_connections_active: int = Field(
+        description="Number of active database connections"
+    )
+    database_connections_idle: int = Field(
+        description="Number of idle database connections"
+    )
+
+
+class ModelMetricsResponse(BaseModel):
+    """Comprehensive metrics response following ONEX standards."""
+
+    timestamp: datetime = Field(
+        default_factory=datetime.utcnow,
+        description="When metrics were collected"
+    )
+    collection_duration_ms: float = Field(
+        description="Time taken to collect metrics in milliseconds"
+    )
+    operation_counts: ModelOperationCounts = Field(
+        description="Count of operations by type"
+    )
+    performance_metrics: ModelPerformanceMetrics = Field(
+        description="Performance statistics"
+    )
+    resource_metrics: ModelResourceMetricsDetailed = Field(
+        description="Detailed resource utilization"
+    )
+    custom_metrics: Dict[str, float] = Field(
+        default_factory=dict,
+        description="Custom application-specific metrics"
+    )
+    alerts: list[str] = Field(
+        default_factory=list,
+        description="Active performance alerts"
+    )
+    recommendations: list[str] = Field(
+        default_factory=list,
+        description="Performance improvement recommendations"
+    )
\ No newline at end of file
