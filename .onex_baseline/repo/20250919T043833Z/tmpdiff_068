diff --git a/src/omnimemory/models/service/model_service_registry.py b/src/omnimemory/models/service/model_service_registry.py
new file mode 100644
index 0000000..cbcf829
--- /dev/null
+++ b/src/omnimemory/models/service/model_service_registry.py
@@ -0,0 +1,135 @@
+"""
+Service registry model following ONEX standards.
+"""
+
+from datetime import datetime
+
+from pydantic import BaseModel, Field
+
+from omnibase_core.enums.node import EnumNodeType
+from omnibase_core.enums.node import EnumHealthStatus
+
+
+class ModelServiceRegistry(BaseModel):
+    """Service registry entry following ONEX standards."""
+
+    # Service identification
+    service_id: str = Field(
+        description="Unique identifier for the service",
+    )
+    service_name: str = Field(
+        description="Human-readable name for the service",
+    )
+    service_version: str = Field(
+        description="Version of the service",
+    )
+
+    # Service location
+    host: str = Field(
+        description="Host address for the service",
+    )
+    port: int = Field(
+        description="Port number for the service",
+    )
+    endpoint: str = Field(
+        description="Service endpoint path",
+    )
+    protocol: str = Field(
+        default="https",
+        description="Protocol used by the service",
+    )
+
+    # ONEX architecture information
+    node_type: EnumNodeType = Field(
+        description="ONEX node type for this service",
+    )
+    capabilities: list[str] = Field(
+        default_factory=list,
+        description="Capabilities provided by this service",
+    )
+
+    # Service status
+    status: EnumHealthStatus = Field(
+        description="Current status of the service",
+    )
+    is_available: bool = Field(
+        description="Whether the service is available for requests",
+    )
+
+    # Registration information
+    registered_at: datetime = Field(
+        default_factory=datetime.utcnow,
+        description="When the service was registered",
+    )
+    last_heartbeat: datetime = Field(
+        default_factory=datetime.utcnow,
+        description="Last heartbeat from the service",
+    )
+    heartbeat_interval_ms: int = Field(
+        default=30000,
+        description="Expected heartbeat interval in milliseconds",
+    )
+
+    # Service metadata
+    tags: list[str] = Field(
+        default_factory=list,
+        description="Tags for categorizing the service",
+    )
+    metadata: dict[str, str] = Field(
+        default_factory=dict,
+        description="Additional metadata for the service",
+    )
+
+    # Load balancing information
+    weight: int = Field(
+        default=1,
+        description="Weight for load balancing (higher = more traffic)",
+    )
+    max_load: int = Field(
+        default=100,
+        description="Maximum load this service can handle",
+    )
+    current_load: int = Field(
+        default=0,
+        description="Current load on the service",
+    )
+
+    # Health information
+    health_check_url: str = Field(
+        description="URL for health checks",
+    )
+    last_health_check: datetime | None = Field(
+        default=None,
+        description="When the last health check was performed",
+    )
+    health_status: str = Field(
+        default="unknown",
+        description="Result of the last health check",
+    )
+
+    # Circuit breaker information
+    circuit_breaker_state: str = Field(
+        default="closed",
+        description="State of the circuit breaker (closed, open, half-open)",
+    )
+    failure_count: int = Field(
+        default=0,
+        description="Number of consecutive failures",
+    )
+    failure_threshold: int = Field(
+        default=5,
+        description="Failure threshold for circuit breaker",
+    )
+
+    # Discovery information
+    discovery_method: str = Field(
+        description="How the service was discovered",
+    )
+    auto_deregister: bool = Field(
+        default=True,
+        description="Whether to auto-deregister if health checks fail",
+    )
+    ttl_seconds: int = Field(
+        default=300,
+        description="Time to live for the registration",
+    )
\ No newline at end of file
