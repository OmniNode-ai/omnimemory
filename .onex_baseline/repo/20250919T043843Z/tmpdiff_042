diff --git a/src/omnimemory/models/foundation/model_health_response.py b/src/omnimemory/models/foundation/model_health_response.py
new file mode 100644
index 0000000..f51de14
--- /dev/null
+++ b/src/omnimemory/models/foundation/model_health_response.py
@@ -0,0 +1,155 @@
+"""
+Health response model following ONEX standards.
+"""
+
+from __future__ import annotations
+
+from datetime import datetime
+from typing import Literal, Optional
+
+from pydantic import BaseModel, Field
+
+
+class ModelDependencyStatus(BaseModel):
+    """Status of a system dependency."""
+
+    name: str = Field(
+        description="Name of the dependency"
+    )
+    status: Literal["healthy", "degraded", "unhealthy"] = Field(
+        description="Health status of the dependency"
+    )
+    latency_ms: float = Field(
+        description="Response latency in milliseconds"
+    )
+    last_check: datetime = Field(
+        description="When the dependency was last checked"
+    )
+    error_message: str | None = Field(
+        default=None,
+        description="Error message if unhealthy"
+    )
+
+
+class ModelResourceMetrics(BaseModel):
+    """System resource utilization metrics."""
+
+    cpu_usage_percent: float = Field(
+        ge=0.0,
+        le=100.0,
+        description="CPU usage percentage"
+    )
+    memory_usage_mb: float = Field(
+        description="Memory usage in megabytes"
+    )
+    memory_usage_percent: float = Field(
+        ge=0.0,
+        le=100.0,
+        description="Memory usage percentage"
+    )
+    disk_usage_percent: float = Field(
+        ge=0.0,
+        le=100.0,
+        description="Disk usage percentage"
+    )
+    network_throughput_mbps: float = Field(
+        description="Network throughput in megabits per second"
+    )
+
+
+class ModelHealthResponse(BaseModel):
+    """Health check response following ONEX standards."""
+
+    status: Literal["healthy", "degraded", "unhealthy"] = Field(
+        description="Overall system health status"
+    )
+    latency_ms: float = Field(
+        description="Health check response time in milliseconds"
+    )
+    timestamp: datetime = Field(
+        default_factory=datetime.utcnow,
+        description="When the health check was performed"
+    )
+    resource_usage: ModelResourceMetrics = Field(
+        description="Current resource utilization"
+    )
+    dependencies: list[ModelDependencyStatus] = Field(
+        default_factory=list,
+        description="Status of system dependencies"
+    )
+    uptime_seconds: int = Field(
+        description="System uptime in seconds"
+    )
+    version: str = Field(
+        description="System version information"
+    )
+    environment: str = Field(
+        description="Deployment environment"
+    )
+
+
+class ModelCircuitBreakerStats(BaseModel):
+    """Circuit breaker statistics for a single dependency."""
+
+    state: Literal["closed", "open", "half_open"] = Field(
+        description="Current circuit breaker state"
+    )
+    failure_count: int = Field(
+        ge=0,
+        description="Number of consecutive failures"
+    )
+    success_count: int = Field(
+        ge=0,
+        description="Total number of successful calls"
+    )
+    total_calls: int = Field(
+        ge=0,
+        description="Total number of calls made"
+    )
+    total_timeouts: int = Field(
+        ge=0,
+        description="Total number of timeout failures"
+    )
+    last_failure_time: Optional[datetime] = Field(
+        default=None,
+        description="Timestamp of the last failure"
+    )
+    state_changed_at: datetime = Field(
+        description="When the circuit breaker state last changed"
+    )
+
+
+class ModelCircuitBreakerStatsCollection(BaseModel):
+    """Collection of circuit breaker statistics for all dependencies."""
+
+    stats: dict[str, ModelCircuitBreakerStats] = Field(
+        description="Circuit breaker statistics keyed by dependency name"
+    )
+    timestamp: datetime = Field(
+        default_factory=datetime.utcnow,
+        description="When the statistics were collected"
+    )
+
+
+class ModelRateLimitedHealthCheckResponse(BaseModel):
+    """Rate-limited health check response."""
+
+    health_check: Optional[ModelHealthResponse] = Field(
+        default=None,
+        description="Health check result if within rate limit"
+    )
+    rate_limited: bool = Field(
+        description="Whether the request was rate limited"
+    )
+    rate_limit_reset_time: Optional[datetime] = Field(
+        default=None,
+        description="When the rate limit will reset"
+    )
+    remaining_requests: Optional[int] = Field(
+        default=None,
+        description="Number of requests remaining in the current window"
+    )
+    error_message: Optional[str] = Field(
+        default=None,
+        description="Error message if rate limited"
+    )
\ No newline at end of file
